{"ast":null,"code":"var _jsxFileName = \"/Users/yeeunshin/Desktop/React-20240422-main/React-20240422-main/react-todolist/src/components/Todolist/Todolist.js\";\nimport React, { Component } from \"react\";\nimport \"./todolist.css\";\nimport { createTodo, deleteTodo, getTodos, updateTodo } from \"../../APIs/todoAPIs\";\n/* \n    1. input(two way data binding, controlled component) submit\n    2. list of todo items\n\n\n    two way data binding: value, event\n\n    list rendering: \n        Array.map, return jsx for each item in the callback\n        each returned jsx should have key props(unique)\n\n\n    dom(document object model): tree object, data structure of how browser represent the view\n\n\n    virtual dom: tree object, simplified data structure of how react represent dom\n        what: tree object, simplified representation of actual dom by react\n        how: generated by jsx\n        why: updating actual dom is computational costly, only updating the necessary part of it using vd, diffing, reconciliation\n    diffing algorithm\n        what: algorithm by react\n        how: compare previous and current virtual and tell the difference from them\n        why: updating actual dom is computational costly, only updating the necessary part of it using vd, diffing, reconciliation\n: \n\n    mounting\n        constructor\n        render\n            1. return jsx: represent virtual dom(tree object)\n            2. create a new virtual dom with most recent state(counter: 2);\n            3. react has the old copy of virtual dom, compare the two tree objects(new and old virtual dom) using diffing algorithm, \n                figure out the difference\n            4. reconciliation: react apply the changes from diffing algorithm comparison to the actual dom(efficient)\n\n        componentDidMount\n    updating\n        shouldComponentUpdate\n        render\n        componentDidUpdate\n\n\n\n    unmounting:\n        componentWillUnmount\n\n*/\n\n/* \n    const dom = {\n        type:\"div\",\n        children: [\n            {\n                type:\"span\",\n                children:[\n                    {\n                        type:\"text\",\n                        content:\"adam\"\n                }\n            ]\n            },\n            {}\n        ]\n    }\n\n        div\n    span  ... ...\n  text:adam \n  \n<div>\n    <span>adam</span>\n</div>\n\nhtml: represents dom in prettier way\n\njsx: represents virtual dom in prettier way\n\n\n*/\n\n/* \ncrud\n    save:\n    get:\n    delete:\n    create:\n\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Todolist extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = async () => {\n      //1. create todo item object\n      const newItem = {\n        content: this.state.input\n      };\n      //2. push to the todolist state\n      try {\n        const todoWithId = await createTodo(newItem);\n        //this.state.todolist.push(newItem);//no mutation\n        this.setState({\n          todolist: [todoWithId, ...this.state.todolist]\n        });\n      } catch (err) {\n        alert(\"failed to create todo!\");\n      }\n    };\n    this.handleDelete = async indexToDelete => {\n      //splice\n      //this.state.todolist.splice(index, 1); //\n      try {\n        const id = this.state.todolist[indexToDelete].id;\n        await deleteTodo(id);\n        this.setState({\n          todolist: this.state.todolist.filter((item, index) => {\n            return index !== indexToDelete;\n          })\n        });\n      } catch (err) {\n        alert(\"failed to delete todo!\");\n      }\n    };\n    this.handleEdit = async id => {\n      if (this.state.editId === null) {\n        this.setState({\n          editId: id,\n          editInput: this.state.todolist.find(item => item.id === id).content\n        });\n      } else {\n        //save\n        //this.state.todolist.find(item=>item.id === id).content = this.state.editInput; //wrong, mutating\n        /* const newState = { ...this.state }; //shallow copy\n        newState.todolist.find((item) => item.id === id).content =\n            this.state.editInput; */ //wrong: mutating nested object/array\n        //object(data structure) => json(string)\n        //const newState = JSON.parse(JSON.stringify(this.state)); //not recommended, JSON.stringify,\n        //manual copy: create new reference for all nested non-primitive data\n        //Array.map create new array\n\n        /* \n        //correct:\n        const newState = {\n            ...this.state,\n            todolist: this.todolist.map((item) => {\n                return { ...item };\n            }),\n        };\n        newState.todolist.find((item) => item.id === id).content =\n            this.state.editInput;\n        this.setState(newState); */\n\n        //break down component and state into smaller one\n        try {\n          await updateTodo(id, {\n            content: this.state.editInput\n          });\n          this.setState({\n            ...this.state,\n            editId: null,\n            editInput: null,\n            todolist: this.state.todolist.map(item => {\n              if (item.id === id) {\n                return {\n                  ...item,\n                  content: this.state.editInput\n                };\n              } else {\n                //return { ...item };//non primitive\n                return item;\n              }\n            })\n          });\n        } catch (err) {\n          alert(\"failed to update todo!\");\n        }\n      }\n    };\n    this.state = {\n      input: \"\",\n      todolist: [],\n      editId: null,\n      editInput: null\n    };\n  }\n  async componentDidMount() {\n    const data = await getTodos();\n    console.log(\"data\", data);\n    this.setState({\n      todolist: data.reverse()\n    });\n  }\n  //nested flexbox\n  //flex: 1d layout system,\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.input,\n          onChange: event => {\n            this.setState({\n              input: event.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleSubmit,\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.todolist.map((item, index) => {\n            const isEdit = item.id === this.state.editId;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [isEdit ? /*#__PURE__*/_jsxDEV(\"input\", {\n                value: this.state.editInput,\n                onChange: e => this.setState({\n                  editInput: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 41\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"todo-action\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => this.handleEdit(item.id),\n                  children: this.state.editId === item.id ? \"save\" : \"edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    this.handleDelete(index);\n                  },\n                  children: \"delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 37\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this);\n  }\n}\nconst person = {\n  name: \"adam\",\n  cars: [\"toyota\", \"bmw\"]\n};\nconst newPerson = {\n  ...person,\n  cars: [...person.cars, \"mercedez\"]\n};\n//mutating\n//shallow copy, deep copy\n/*c onst personCopy = { ...person }; // wrapper object reference\npersonCopy.cars.push(\"mercedez\");\n\nconsole.log(\"test\", personCopy, person);\n\nconst a = [1,2,3];\nconst b = [...a];//O(n) */","map":{"version":3,"names":["React","Component","createTodo","deleteTodo","getTodos","updateTodo","jsxDEV","_jsxDEV","Todolist","constructor","props","handleSubmit","newItem","content","state","input","todoWithId","setState","todolist","err","alert","handleDelete","indexToDelete","id","filter","item","index","handleEdit","editId","editInput","find","map","componentDidMount","data","console","log","reverse","render","className","children","value","onChange","event","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isEdit","e","person","name","cars","newPerson"],"sources":["/Users/yeeunshin/Desktop/React-20240422-main/React-20240422-main/react-todolist/src/components/Todolist/Todolist.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./todolist.css\";\nimport {\n    createTodo,\n    deleteTodo,\n    getTodos,\n    updateTodo,\n} from \"../../APIs/todoAPIs\";\n/* \n    1. input(two way data binding, controlled component) submit\n    2. list of todo items\n\n\n    two way data binding: value, event\n\n    list rendering: \n        Array.map, return jsx for each item in the callback\n        each returned jsx should have key props(unique)\n\n\n    dom(document object model): tree object, data structure of how browser represent the view\n\n\n    virtual dom: tree object, simplified data structure of how react represent dom\n        what: tree object, simplified representation of actual dom by react\n        how: generated by jsx\n        why: updating actual dom is computational costly, only updating the necessary part of it using vd, diffing, reconciliation\n    diffing algorithm\n        what: algorithm by react\n        how: compare previous and current virtual and tell the difference from them\n        why: updating actual dom is computational costly, only updating the necessary part of it using vd, diffing, reconciliation\n: \n\n    mounting\n        constructor\n        render\n            1. return jsx: represent virtual dom(tree object)\n            2. create a new virtual dom with most recent state(counter: 2);\n            3. react has the old copy of virtual dom, compare the two tree objects(new and old virtual dom) using diffing algorithm, \n                figure out the difference\n            4. reconciliation: react apply the changes from diffing algorithm comparison to the actual dom(efficient)\n\n        componentDidMount\n    updating\n        shouldComponentUpdate\n        render\n        componentDidUpdate\n\n\n\n    unmounting:\n        componentWillUnmount\n\n*/\n\n/* \n    const dom = {\n        type:\"div\",\n        children: [\n            {\n                type:\"span\",\n                children:[\n                    {\n                        type:\"text\",\n                        content:\"adam\"\n                }\n            ]\n            },\n            {}\n        ]\n    }\n\n        div\n    span  ... ...\n  text:adam \n  \n<div>\n    <span>adam</span>\n</div>\n\nhtml: represents dom in prettier way\n\njsx: represents virtual dom in prettier way\n\n\n*/\n\n/* \ncrud\n    save:\n    get:\n    delete:\n    create:\n\n*/\nexport default class Todolist extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\",\n            todolist: [],\n            editId: null,\n            editInput: null,\n        };\n    }\n\n    async componentDidMount() {\n        const data = await getTodos();\n        console.log(\"data\", data);\n        this.setState({ todolist: data.reverse() });\n    }\n\n    handleSubmit = async () => {\n        //1. create todo item object\n        const newItem = {\n            content: this.state.input,\n        };\n        //2. push to the todolist state\n        try {\n            const todoWithId = await createTodo(newItem);\n            //this.state.todolist.push(newItem);//no mutation\n            this.setState({\n                todolist: [todoWithId, ...this.state.todolist],\n            });\n        } catch (err) {\n            alert(\"failed to create todo!\");\n        }\n    };\n\n    handleDelete = async (indexToDelete) => {\n        //splice\n        //this.state.todolist.splice(index, 1); //\n        try {\n            const id = this.state.todolist[indexToDelete].id;\n            await deleteTodo(id);\n            this.setState({\n                todolist: this.state.todolist.filter((item, index) => {\n                    return index !== indexToDelete;\n                }),\n            });\n        } catch (err) {\n            alert(\"failed to delete todo!\");\n        }\n    };\n\n    handleEdit = async (id) => {\n        if (this.state.editId === null) {\n            this.setState({\n                editId: id,\n                editInput: this.state.todolist.find((item) => item.id === id)\n                    .content,\n            });\n        } else {\n            //save\n            //this.state.todolist.find(item=>item.id === id).content = this.state.editInput; //wrong, mutating\n            /* const newState = { ...this.state }; //shallow copy\n            newState.todolist.find((item) => item.id === id).content =\n                this.state.editInput; */ //wrong: mutating nested object/array\n            //object(data structure) => json(string)\n            //const newState = JSON.parse(JSON.stringify(this.state)); //not recommended, JSON.stringify,\n            //manual copy: create new reference for all nested non-primitive data\n            //Array.map create new array\n\n            /* \n            //correct:\n            const newState = {\n                ...this.state,\n                todolist: this.todolist.map((item) => {\n                    return { ...item };\n                }),\n            };\n            newState.todolist.find((item) => item.id === id).content =\n                this.state.editInput;\n            this.setState(newState); */\n\n            //break down component and state into smaller one\n            try {\n                await updateTodo(id, { content: this.state.editInput });\n                this.setState({\n                    ...this.state,\n                    editId: null,\n                    editInput: null,\n                    todolist: this.state.todolist.map((item) => {\n                        if (item.id === id) {\n                            return { ...item, content: this.state.editInput };\n                        } else {\n                            //return { ...item };//non primitive\n                            return item;\n                        }\n                    }),\n                });\n            } catch (err) {\n                alert(\"failed to update todo!\");\n            }\n        }\n    };\n    //nested flexbox\n    //flex: 1d layout system,\n    render() {\n        return (\n            <div className=\"todo-container\">\n                <div className=\"form-container\">\n                    <input\n                        value={this.state.input}\n                        onChange={(event) => {\n                            this.setState({ input: event.target.value });\n                        }}\n                    />\n                    <button onClick={this.handleSubmit}>submit</button>\n                </div>\n\n                <div className=\"list-container\">\n                    <ul>\n                        {this.state.todolist.map((item, index) => {\n                            const isEdit = item.id === this.state.editId;\n                            return (\n                                <li key={item.id}>\n                                    {/* conditional rendering */}\n                                    {isEdit ? (\n                                        <input\n                                            value={this.state.editInput}\n                                            onChange={(e) =>\n                                                this.setState({\n                                                    editInput: e.target.value,\n                                                })\n                                            }\n                                        />\n                                    ) : (\n                                        <span>{item.content}</span>\n                                    )}\n\n                                    {/* replace span */}\n                                    <div className=\"todo-action\">\n                                        <button\n                                            onClick={() =>\n                                                this.handleEdit(item.id)\n                                            }\n                                        >\n                                            {this.state.editId === item.id\n                                                ? \"save\"\n                                                : \"edit\"}\n                                            {/* save */}\n                                        </button>\n                                        <button\n                                            onClick={() => {\n                                                this.handleDelete(index);\n                                            }}\n                                        >\n                                            delete\n                                        </button>\n                                    </div>\n                                </li>\n                            );\n                        })}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst person = { name: \"adam\", cars: [\"toyota\", \"bmw\"] };\nconst newPerson = { ...person, cars: [...person.cars, \"mercedez\"] };\n//mutating\n//shallow copy, deep copy\n/*c onst personCopy = { ...person }; // wrapper object reference\npersonCopy.cars.push(\"mercedez\");\n\nconsole.log(\"test\", personCopy, person);\n\nconst a = [1,2,3];\nconst b = [...a];//O(n) */\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,gBAAgB;AACvB,SACIC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,UAAU,QACP,qBAAqB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AAQA,eAAe,MAAMC,QAAQ,SAASP,SAAS,CAAC;EAC5CQ,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAC,KAejBC,YAAY,GAAG,YAAY;MACvB;MACA,MAAMC,OAAO,GAAG;QACZC,OAAO,EAAE,IAAI,CAACC,KAAK,CAACC;MACxB,CAAC;MACD;MACA,IAAI;QACA,MAAMC,UAAU,GAAG,MAAMd,UAAU,CAACU,OAAO,CAAC;QAC5C;QACA,IAAI,CAACK,QAAQ,CAAC;UACVC,QAAQ,EAAE,CAACF,UAAU,EAAE,GAAG,IAAI,CAACF,KAAK,CAACI,QAAQ;QACjD,CAAC,CAAC;MACN,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,KAAK,CAAC,wBAAwB,CAAC;MACnC;IACJ,CAAC;IAAA,KAEDC,YAAY,GAAG,MAAOC,aAAa,IAAK;MACpC;MACA;MACA,IAAI;QACA,MAAMC,EAAE,GAAG,IAAI,CAACT,KAAK,CAACI,QAAQ,CAACI,aAAa,CAAC,CAACC,EAAE;QAChD,MAAMpB,UAAU,CAACoB,EAAE,CAAC;QACpB,IAAI,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}