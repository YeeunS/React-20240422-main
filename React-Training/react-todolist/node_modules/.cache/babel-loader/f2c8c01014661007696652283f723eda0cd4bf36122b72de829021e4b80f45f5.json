{"ast":null,"code":"var _jsxFileName = \"/Users/yeeunshin/Desktop/React-20240422-main/React-Training/react-todolist/src/components/Todolist/Todolist.js\";\nimport React, { Component } from \"react\";\nimport \"./todolist.css\";\nimport { createTodo, deleteTodo, getTodos, updateTodo } from \"../../APIs/todoAPIs\";\n/* \n    1. input(two way data binding, controlled component) submit\n    2. list of todo items\n\n\n    two way data binding: value, event\n\n    list rendering: \n        Array.map, return jsx for each item in the callback\n        each returned jsx should have key props(unique)\n\n\n    dom(document object model): tree object, data structure of how browser represent the view\n\n\n    virtual dom: tree object, simplified data structure of how react represent dom\n        what: tree object, simplified representation of actual dom by react\n        how: generated by jsx\n        why: updating actual dom is computational costly, only updating the necessary part of it using vd, diffing, reconciliation\n    diffing algorithm\n        what: algorithm by react\n        how: compare previous and current virtual and tell the difference from them\n        why: updating actual dom is computational costly, only updating the necessary part of it using vd, diffing, reconciliation\n: \n\n    mounting\n        constructor\n        render\n            1. return jsx: represent virtual dom(tree object)\n            2. create a new virtual dom with most recent state(counter: 2);\n            3. react has the old copy of virtual dom, compare the two tree objects(new and old virtual dom) using diffing algorithm, \n                figure out the difference\n            4. reconciliation: react apply the changes from diffing algorithm comparison to the actual dom(efficient)\n\n        componentDidMount\n    updating\n        shouldComponentUpdate\n        render\n        componentDidUpdate\n\n\n\n    unmounting:\n        componentWillUnmount\n\n*/\n\n/* \n    const dom = {\n        type:\"div\",\n        children: [\n            {\n                type:\"span\",\n                children:[\n                    {\n                        type:\"text\",\n                        content:\"adam\"\n                }\n            ]\n            },\n            {}\n        ]\n    }\n\n        div\n    span  ... ...\n  text:adam \n  \n<div>\n    <span>adam</span>\n</div>\n\nhtml: represents dom in prettier way\n\njsx: represents virtual dom in prettier way\n\n\n*/\n\n/* \ncrud\n    save:\n    get:\n    delete:\n    create:\n\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Todolist extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = async () => {\n      //1. create todo item object\n      const newItem = {\n        content: this.state.input\n      };\n      //2. push to the todolist state\n      try {\n        const todoWithId = await createTodo(newItem);\n        //this.state.todolist.push(newItem);//no mutation\n        this.setState({\n          todolist: [todoWithId, ...this.state.todolist]\n        });\n      } catch (err) {\n        alert(\"failed to create todo!\");\n      }\n    };\n    this.handleDelete = async indexToDelete => {\n      //splice\n      //this.state.todolist.splice(index, 1); //\n      try {\n        const id = this.state.todolist[indexToDelete].id;\n        await deleteTodo(id);\n        this.setState({\n          todolist: this.state.todolist.filter((item, index) => {\n            return index !== indexToDelete;\n          })\n        });\n      } catch (err) {\n        alert(\"failed to delete todo!\");\n      }\n    };\n    this.handleEdit = async id => {\n      if (this.state.editId === null) {\n        this.setState({\n          editId: id,\n          editInput: this.state.todolist.find(item => item.id === id).content\n        });\n      } else {\n        //save\n        //this.state.todolist.find(item=>item.id === id).content = this.state.editInput; //wrong, mutating\n        /* const newState = { ...this.state }; //shallow copy\n              newState.todolist.find((item) => item.id === id).content =\n                  this.state.editInput; */ //wrong: mutating nested object/array\n        //object(data structure) => json(string)\n        //const newState = JSON.parse(JSON.stringify(this.state)); //not recommended, JSON.stringify,\n        //manual copy: create new reference for all nested non-primitive data\n        //Array.map create new array\n\n        /* \n              //correct:\n              const newState = {\n                  ...this.state,\n                  todolist: this.todolist.map((item) => {\n                      return { ...item };\n                  }),\n              };\n              newState.todolist.find((item) => item.id === id).content =\n                  this.state.editInput;\n              this.setState(newState); */\n\n        //break down component and state into smaller one\n        try {\n          await updateTodo(id, {\n            content: this.state.editInput\n          });\n          this.setState({\n            ...this.state,\n            editId: null,\n            editInput: null,\n            todolist: this.state.todolist.map(item => {\n              if (item.id === id) {\n                return {\n                  ...item,\n                  content: this.state.editInput\n                };\n              } else {\n                //return { ...item };//non primitive\n                return item;\n              }\n            })\n          });\n        } catch (err) {\n          alert(\"failed to update todo!\");\n        }\n      }\n    };\n    this.state = {\n      input: \"\",\n      todolist: [],\n      editId: null,\n      editInput: null\n    };\n  }\n  async componentDidMount() {\n    const data = await getTodos();\n    console.log(\"data\", data);\n    this.setState({\n      todolist: data.reverse()\n    });\n  }\n  //nested flexbox\n  //flex: 1d layout system,\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.input,\n          onChange: event => {\n            this.setState({\n              input: event.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleSubmit,\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.todolist.map((item, index) => {\n            const isEdit = item.id === this.state.editId;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [isEdit ? /*#__PURE__*/_jsxDEV(\"input\", {\n                value: this.state.editInput,\n                onChange: e => this.setState({\n                  editInput: e.target.value\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"todo-action\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => this.handleEdit(item.id),\n                  children: this.state.editId === item.id ? \"save\" : \"edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    this.handleDelete(index);\n                  },\n                  children: \"delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this)]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// const person = { name: \"adam\", cars: [\"toyota\", \"bmw\"] };\n// const newPerson = { ...person, cars: [...person.cars, \"mercedez\"] };\n//mutating\n//shallow copy, deep copy\n/*const personCopy = { ...person }; // wrapper object reference\npersonCopy.cars.push(\"mercedez\");\n\nconsole.log(\"test\", personCopy, person);\n\nconst a = [1,2,3];\nconst b = [...a];//O(n) */","map":{"version":3,"names":["React","Component","createTodo","deleteTodo","getTodos","updateTodo","jsxDEV","_jsxDEV","Todolist","constructor","props","handleSubmit","newItem","content","state","input","todoWithId","setState","todolist","err","alert","handleDelete","indexToDelete","id","filter","item","index","handleEdit","editId","editInput","find","map","componentDidMount","data","console","log","reverse","render","className","children","value","onChange","event","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isEdit","e"],"sources":["/Users/yeeunshin/Desktop/React-20240422-main/React-Training/react-todolist/src/components/Todolist/Todolist.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport \"./todolist.css\";\nimport {\n  createTodo,\n  deleteTodo,\n  getTodos,\n  updateTodo,\n} from \"../../APIs/todoAPIs\";\n/* \n    1. input(two way data binding, controlled component) submit\n    2. list of todo items\n\n\n    two way data binding: value, event\n\n    list rendering: \n        Array.map, return jsx for each item in the callback\n        each returned jsx should have key props(unique)\n\n\n    dom(document object model): tree object, data structure of how browser represent the view\n\n\n    virtual dom: tree object, simplified data structure of how react represent dom\n        what: tree object, simplified representation of actual dom by react\n        how: generated by jsx\n        why: updating actual dom is computational costly, only updating the necessary part of it using vd, diffing, reconciliation\n    diffing algorithm\n        what: algorithm by react\n        how: compare previous and current virtual and tell the difference from them\n        why: updating actual dom is computational costly, only updating the necessary part of it using vd, diffing, reconciliation\n: \n\n    mounting\n        constructor\n        render\n            1. return jsx: represent virtual dom(tree object)\n            2. create a new virtual dom with most recent state(counter: 2);\n            3. react has the old copy of virtual dom, compare the two tree objects(new and old virtual dom) using diffing algorithm, \n                figure out the difference\n            4. reconciliation: react apply the changes from diffing algorithm comparison to the actual dom(efficient)\n\n        componentDidMount\n    updating\n        shouldComponentUpdate\n        render\n        componentDidUpdate\n\n\n\n    unmounting:\n        componentWillUnmount\n\n*/\n\n/* \n    const dom = {\n        type:\"div\",\n        children: [\n            {\n                type:\"span\",\n                children:[\n                    {\n                        type:\"text\",\n                        content:\"adam\"\n                }\n            ]\n            },\n            {}\n        ]\n    }\n\n        div\n    span  ... ...\n  text:adam \n  \n<div>\n    <span>adam</span>\n</div>\n\nhtml: represents dom in prettier way\n\njsx: represents virtual dom in prettier way\n\n\n*/\n\n/* \ncrud\n    save:\n    get:\n    delete:\n    create:\n\n*/\nexport default class Todolist extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      todolist: [],\n      editId: null,\n      editInput: null,\n    };\n  }\n\n  async componentDidMount() {\n    const data = await getTodos();\n    console.log(\"data\", data);\n    this.setState({ todolist: data.reverse() });\n  }\n\n  handleSubmit = async () => {\n    //1. create todo item object\n    const newItem = {\n      content: this.state.input,\n    };\n    //2. push to the todolist state\n    try {\n      const todoWithId = await createTodo(newItem);\n      //this.state.todolist.push(newItem);//no mutation\n      this.setState({\n        todolist: [todoWithId, ...this.state.todolist],\n      });\n    } catch (err) {\n      alert(\"failed to create todo!\");\n    }\n  };\n\n  handleDelete = async (indexToDelete) => {\n    //splice\n    //this.state.todolist.splice(index, 1); //\n    try {\n      const id = this.state.todolist[indexToDelete].id;\n      await deleteTodo(id);\n      this.setState({\n        todolist: this.state.todolist.filter((item, index) => {\n          return index !== indexToDelete;\n        }),\n      });\n    } catch (err) {\n      alert(\"failed to delete todo!\");\n    }\n  };\n\n  handleEdit = async (id) => {\n    if (this.state.editId === null) {\n      this.setState({\n        editId: id,\n        editInput: this.state.todolist.find((item) => item.id === id).content,\n      });\n    } else {\n      //save\n      //this.state.todolist.find(item=>item.id === id).content = this.state.editInput; //wrong, mutating\n      /* const newState = { ...this.state }; //shallow copy\n            newState.todolist.find((item) => item.id === id).content =\n                this.state.editInput; */ //wrong: mutating nested object/array\n      //object(data structure) => json(string)\n      //const newState = JSON.parse(JSON.stringify(this.state)); //not recommended, JSON.stringify,\n      //manual copy: create new reference for all nested non-primitive data\n      //Array.map create new array\n\n      /* \n            //correct:\n            const newState = {\n                ...this.state,\n                todolist: this.todolist.map((item) => {\n                    return { ...item };\n                }),\n            };\n            newState.todolist.find((item) => item.id === id).content =\n                this.state.editInput;\n            this.setState(newState); */\n\n      //break down component and state into smaller one\n      try {\n        await updateTodo(id, { content: this.state.editInput });\n        this.setState({\n          ...this.state,\n          editId: null,\n          editInput: null,\n          todolist: this.state.todolist.map((item) => {\n            if (item.id === id) {\n              return { ...item, content: this.state.editInput };\n            } else {\n              //return { ...item };//non primitive\n              return item;\n            }\n          }),\n        });\n      } catch (err) {\n        alert(\"failed to update todo!\");\n      }\n    }\n  };\n  //nested flexbox\n  //flex: 1d layout system,\n  render() {\n    return (\n      <div className=\"todo-container\">\n        <div className=\"form-container\">\n          <input\n            value={this.state.input}\n            onChange={(event) => {\n              this.setState({ input: event.target.value });\n            }}\n          />\n          <button onClick={this.handleSubmit}>submit</button>\n        </div>\n\n        <div className=\"list-container\">\n          <ul>\n            {this.state.todolist.map((item, index) => {\n              const isEdit = item.id === this.state.editId;\n              return (\n                <li key={item.id}>\n                  {/* conditional rendering */}\n                  {isEdit ? (\n                    <input\n                      value={this.state.editInput}\n                      onChange={(e) =>\n                        this.setState({\n                          editInput: e.target.value,\n                        })\n                      }\n                    />\n                  ) : (\n                    <span>{item.content}</span>\n                  )}\n\n                  {/* replace span */}\n                  <div className=\"todo-action\">\n                    <button onClick={() => this.handleEdit(item.id)}>\n                      {this.state.editId === item.id ? \"save\" : \"edit\"}\n                      {/* save */}\n                    </button>\n                    <button\n                      onClick={() => {\n                        this.handleDelete(index);\n                      }}\n                    >\n                      delete\n                    </button>\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\n// const person = { name: \"adam\", cars: [\"toyota\", \"bmw\"] };\n// const newPerson = { ...person, cars: [...person.cars, \"mercedez\"] };\n//mutating\n//shallow copy, deep copy\n/*const personCopy = { ...person }; // wrapper object reference\npersonCopy.cars.push(\"mercedez\");\n\nconsole.log(\"test\", personCopy, person);\n\nconst a = [1,2,3];\nconst b = [...a];//O(n) */\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,gBAAgB;AACvB,SACEC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,UAAU,QACL,qBAAqB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AAQA,eAAe,MAAMC,QAAQ,SAASP,SAAS,CAAC;EAC9CQ,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAefC,YAAY,GAAG,YAAY;MACzB;MACA,MAAMC,OAAO,GAAG;QACdC,OAAO,EAAE,IAAI,CAACC,KAAK,CAACC;MACtB,CAAC;MACD;MACA,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMd,UAAU,CAACU,OAAO,CAAC;QAC5C;QACA,IAAI,CAACK,QAAQ,CAAC;UACZC,QAAQ,EAAE,CAACF,UAAU,EAAE,GAAG,IAAI,CAACF,KAAK,CAACI,QAAQ;QAC/C,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,KAAK,CAAC,wBAAwB,CAAC;MACjC;IACF,CAAC;IAAA,KAEDC,YAAY,GAAG,MAAOC,aAAa,IAAK;MACtC;MACA;MACA,IAAI;QACF,MAAMC,EAAE,GAAG,IAAI,CAACT,KAAK,CAACI,QAAQ,CAACI,aAAa,CAAC,CAACC,EAAE;QAChD,MAAMpB,UAAU,CAACoB,EAAE,CAAC;QACpB,IAAI,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}